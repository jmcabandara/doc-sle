<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<!-- Converted by suse-upgrade version 1.1 -->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.lvm" xml:lang="en">
	<title>Docker Overview</title>
	<para>
  Docker is a lightweight virtualization solution to run multiple virtual
  units (containers) simultaneously on a single control host. Containers are
  isolated with Kernel Control Groups (<xref linkend="vle.docker.cgroup"/>)
  and <xref linkend="vle.docker.namespace"/>.
 </para>
 <para>
  Full virtualization solutions such as &xen;, &kvm;, or &libvirt; are based
  on the processor simulating a complete hardware environment and
  controlling the virtual machines. However, Docker only provides operating
  system-level virtualization where the Linux kernel controls isolated
  containers.
 </para>
 <para>
 Prior to moving into details about docker, let's define some terms used furhter:
 </para>
 <variablelist>
 <varlistentry>
 <term>
 Docker engine
 </term>
 <listitem>
 	<para>
 	The docker engine is a server-client type application that performs all tasks related to virtual machines. The docker engine comprises the following:
 		<itemizedlist>
 			<listitem>
 				<para>
 				daemon - is the server side of the docker engine that manages all docker objects (images, containers, network used by containers, etc.)
 				</para>
 			</listitem>
 			<listitem>
 				<para>
 				REST API - applications can use this API to communicate directly with the daemon 
 				</para>
 			</listitem>
 			<listitem>
 				<para>
 				a CLI client - that enables you to communicate with the daemon. If the daemon is running on a different machine than the CLI client, the CLI client can communicate by using network sockets or the REST API provided by the docker engine.
 				</para>
 			</listitem>
 		</itemizedlist>
 	</para>
 </listitem>
 </varlistentry>
 <varlistentry>
    <term xml:id="Docker_Image">Image</term>
    <listitem>
     <para>
      An <emphasis>image</emphasis> is a set of instructions that the <xref linkend="Docker_engine" xreflabel="docker engine"/> should do to run a <emphasis>virtual machine</emphasis> on the host server. A Docker
      image is made by a series of layers built one over the other. Each layer
      corresponds to a permanent change committed from a container to the
      image. For more details, see the official Docker documentation at <link
      xlink:href="http://docs.docker.com/engine/reference/glossary#image"/>.
      </para>
    </listitem>
   </varlistentry>
   <varlistentry>
   	<term>
   	Container
   	</term>
   	<listitem>
   		<para>
   		A <emphasis>container</emphasis> is a running instance based on a particular docker <xref linkend="Docker_Image" xreflabel="image"/>.
   		</para>
   	</listitem>
   </varlistentry>
   <varlistentry>
   	<term>
   	Registry
   	</term>
   	<listitem>
   		<para>
   		A <emphasis>registry</emphasis> is storage for already created images. There are two types of registry:
   			<itemizedlist>
   				<listitem>
   					<para>
   					public registry - where everyone (usually registered) can download and use images. Typical public registtry is <link xlink:href="https://hub.docker.com/">docker hub</link>.
   					</para>
   				</listitem>
   				<listitem>
   					<para>
   					private registry - that are accessible just for paritucular users or from particular private network. 
   					</para>
   				</listitem>
   			</itemizedlist>
   		</para>
   	</listitem>
   </varlistentry>
   <varlistentry>
   	<term>
   	Repository
   	</term>
   	<listitem>
   		<para>
   		A <emphasis>repository</emphasis> stores different versions of particular images.
   		</para>
   	</listitem>
   </varlistentry>
   </variablelist>
   <para>
   
   </para>
 
</chapter>
